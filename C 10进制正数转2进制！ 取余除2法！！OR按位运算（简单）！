c为需要转化的10进制数！！！！
  ===========================================================================方法111111！==========================================================================
 ============================================================================ 方法11111==========================================================================
  int i = 0;
	int a[32] = { 0 };   用于接收c通过转换后的二进制数（倒序！！！）
  
	while (c != 0)
	{
		a[i] = c % 2;
		i++;
		c = c / 2;
	}                       ！！！！ ！！！！！！！注意  此段代码只能求正数  ！！！若要改进 将其封装成函数  接收形参设定为 unsigned int！！ 则负号被忽略（-1变为一个很大的正数）
									.					a此时再余2除2 加上判断 即可计算所有1（或0）
                                            													
for(i=i-1;i>=0;i--)
  printf("%d",a[i]);    倒着 将a数组中的元素输出 则为c转换后的2进制！！！
  
  
  
 ===========================================================================方法22222!更简单!更简单！==========================================================================
 ============================================================================ 方法222222!更简单!更简单==========================================================================

  
  
  
  	//将 该数字 每一位 与 00000000..1 按位 & 一下（一位&完可以通过右移i下>实现！！一共右移31下即可）  为1 则那一位为1，为0 则那一位为0！！妙阿！
int count_bit_one(int n)
{
		int count = 0;
		int i = 0;

		for (i = 0, i < 31, i++)
		{
			if (n & 1 == 1)
			{
				count++;
			}
		}
		return count;



}

}
  
  
  
  
  ============================================================================ 参考！！==========================================================================
                              
  
 
  除基取余法，就是将10进制（我们平常使用最广泛的数字），通过一连串的除法，转换成我们所需要的进制。例如将10进制转换为8进制，这里8就是"基"。

先举个除基取余法的栗子：将十进制数 13 转换为二进制。我们可以这么去计算：  （取余除2！！！）

13%2＝  1 ！    ……12/2=6
6%2＝   0 ！    …… 6/2＝3
3%2＝   1 ！    …… 3/2＝1
1%2＝   1 ！   …… 1/2=0=》   跳出  所以 13 转 2进制 为  1  1  0  1

注意，必须除到商为0，才算完成。从下到上排列起来就是1101，所以 十进制13=二进制1101。

那么如何用C语言实现呢？下面举了个栗子~

#include <stdio.h>

int main() {
  int number , j , out[31];  //number为十进制数字，j为要转化的进制。out存放j进制数。因为要一位一位处理，所以out为数组 
  int i = 0;  //i为处理次数，便于最后遍历数组。 
  scanf("%d %d",&number,&j);  //输入待处理数字和进制 
  do{    //do循环 
    out[i++] = number % j;  //令out数组依次存放待处理数字与进制的余数 
    number /= j;  //number = number / j ，求商，用于下一轮继续求余 
  }while(number != 0);  //直到商为0，停止循环 
  for(int m = i-1; m>=0; m--)  //从高位到低位，遍历数组 
    printf("%d",out[m]);  //依次输出数组内的数据 
  return 0;
}
  
